---
output: html_document
editor_options: 
 chunk_output_type: console
---

# Construct and save long SOI data frame

## Setup

```{r}
#| label: setup

source(here::here("R", "libraries.R"))
source(here::here("R", "constants.R"))
source(here::here("R", "functions.R"))

```

```{r}

agilabels <- read_delim(
"agistub; agilo; agihi; agilabel
0; -9E+99; 0; Total
1; -9E+99; 1; Under $1
2; 1; 10000; $1 under $10,000
3; 10000; 25000; $10,000 under $25,000
4; 25000; 50000; $25,000 under $50,000
5; 50000; 75000; $50,000 under $75,000
6; 75000; 100000; $75,000 under $100,000
7; 100000; 200000; $100,000 under $200,000
8; 200000; 500000; $200,000 under $500,000
9; 500000; 1000000; $500,000 under $1,000,000
10; 1000000; 9E+99; $1,000,000 or more
", delim=";", trim_ws=TRUE)
agilabels

write_csv(agilabels, fs::path(DINTERMEDIATE, "agilabels.csv"))

```


```{r}
#| label: read-data
#| output: false

# variable_descriptions <- read_csv(fs::path(DINTERMEDIATE, "soi_documentation.csv"))
variable_descriptions <- read_csv(fs::path(DINTERMEDIATE, "soi_documentation_by_year.csv"))
agilabels <- read_csv(fs::path(DINTERMEDIATE, "agilabels.csv"))

csvfiles <- dir_ls(DRAW, glob="*.csv")

get_csvdata <- function(csvfile){
  year <- paste0("20", str_sub(fs::path_file(csvfile), 1, 2))
  print(year)
  vroom(csvfile) |> 
    mutate(year=year)
}

csvdata <- purrr::map(csvfiles, get_csvdata) |> 
  list_rbind()
count(csvdata, year)

csvdata2 <- csvdata |> 
  rename_with(str_to_lower) |> 
  rename(stabbr=state, agistub=agi_stub) |> 
  mutate(year=as.integer(year)) |> 
  pivot_longer(-c(stabbr, year, agistub),
               names_to = "vname") |> 
  filter(!is.na(value)) |> 
  left_join(variable_descriptions,
            by = join_by(vname, year)) |> 
  left_join(agilabels, by = join_by(agistub)) |> 
  mutate(value=ifelse(vtype=="amount", value * 1000, value)) |> 
  select(stabbr, vname, basevname, vtype, agistub, agilo, agihi, agilabel, year, value, udescription, description) |> 
  arrange(stabbr, vname, basevname, vtype, agistub, year)

skim(csvdata2)
glimpse(csvdata2)
count(csvdata2, vtype)
csvdata2 |> filter(value==max(value))
csvdata2 |> filter(value==min(value))

saveRDS(csvdata2, fs::path(DINTERMEDIATE, "soilong.rds"))


```

```{r}
#| label: info-for-targets
#| eval: false

# to be used later

# varname: any Tax-Calculator input variable name plus any Tax-Calculator calculated variable in the list of cached variables in the tmd/storage/__init__.py file
# count: integer in [0,4] range:
# count==0 implies dollar total of varname is tabulated
# count==1 implies number of tax units with any value of varname is tabulated
# count==2 implies number of tax units with a nonzero value of varname is tabulated
# count==3 implies number of tax units with a positive value of varname is tabulated
# count==4 implies number of tax units with a negative value of varname is tabulated
# scope: integer in [0,2] range:
# scope==0 implies all tax units are tabulated
# scope==1 implies only PUF-derived filing units are tabulated
# scope==2 implies only CPS-derived filing units are tabulated
# agilo: float representing lower bound of the AGI range (which is included in the range) that is tabulated.
# agihi: float representing upper bound of the AGI range (which is excluded from the range) that is tabulated.
# fstatus: integer in [0,5] range:
# fstatus=0 implies all filing statuses are tabulated
# other fstatus values imply just the tax units with the Tax-Calculator MARS variable equal to fstatus are included in the tabulation
# target: target amount:
# dollars if count==0
# number of tax units if count>0

```


Explore the data

```{r}
#| label: explore
#| output: false
#| eval: false

soilong <- readRDS(fs::path(DINTERMEDIATE, "soilong.rds"))

# data checks

soilong |>
  filter(is.na(vtype)) |>
  count(vname)

soilong |>
  filter(is.na(vtype)) |> 
  skim()

# n17000 had been one of the all-missing values variables in some years
# we have since dropped all missing values
variable_descriptions |> 
  filter(vname=="n17000") # Number of returns with Total medical and dental expense deduction

ns(csvdata)
csvdata |> 
  filter(STATE=="NY", AGI_STUB==0) |> 
  select(STATE, AGI_STUB, year, N1, N17000, A17000)

#   STATE AGI_STUB year        N1 N17000  A17000
#   <chr>    <dbl> <chr>    <dbl>  <dbl>   <dbl>
# 1 NY           0 2015   9614610     NA      NA
# 2 NY           0 2016   9589410 458840 4776918
# 3 NY           0 2017   9694910 494520 5124475
# 4 NY           0 2018   9742580 235020 4029879
# 5 NY           0 2019   9760870 221060 3953827
# 6 NY           0 2020  10159910 200990 3753634
# 7 NY           0 2021   9813320 187220 3702585

soilong |> 
  filter(stabbr=="NY", vname %in% c("n17000", "a17000"), agistub==0) |> 
  select(stabbr, agistub, vname, vtype, year, value, udescription) |> 
  arrange(vtype, year)



```


