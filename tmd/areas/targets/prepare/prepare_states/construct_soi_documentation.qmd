---
output: html_document
editor_options: 
 chunk_output_type: console
---

# Prepare SOI documentation files

## Setup

```{r}
#| label: setup

suppressPackageStartupMessages(source(here::here("R", "libraries.R")))
source(here::here("R", "constants.R"))
source(here::here("R", "functions.R"))

library(stringdist) # for calculating "distances" between strings

```


## Read and stack documentation files for multiple years

Start with *soi_states_variable_documentation.xlsx*, a hand-created workbook that has a sheet for each year from 2015-2021. Each sheet has a table from the SOI documentation file for that year, with variable names, variable descriptions, and certain other information. For example, the SOI file for 2021 is named *21incmdocguide.doc*. See the notes sheet in the workbook for how the Word tables were copied to Excel. The basic idea was to copy each table to a sheet and make the absolute minimum manual changes needed to make the table rectangular and computer-readable. The goal is to do as much parsing and cleaning in computer code as possible to reduce risk of errors and make it reproducible.

Read each sheet (one per year).
Drop empty rows.
Combine multiple rows for the AGI_STUB variable into one row that has information on AGI ranges.
Stack the years.

```{r}
#| label: stack-documentation
#| output: false

fname <- "soi_states_variable_documentation.xlsx"
fpath <- fs::path(DRAW, fname)

get_year <- function(year){
  df1 <- readxl::read_xlsx(fpath, sheet = as.character(year), col_types = "text")
  df2 <- df1 |> 
    select(soivname=1, description=2, reference=3, type=4) |> 
    filter(if_any(everything(), ~!is.na(.))) |> 
    # after verifying that AGI_STUB is the only variable with NA in soivname
    # fill down and then concatenate the reference column
    fill(soivname, description, type, .direction="down") |> 
    mutate(reference = paste(reference, collapse = "\n"), .by=soivname) |> 
    distinct() |> 
    # for now, make mistaken references NA
    mutate(reference=ifelse(!is.na(as.numeric(reference)), NA_character_, reference),
           reference=ifelse(reference=="NA", NA_character_, reference),
           year=!!year) |> 
    relocate(year)
  df2
}

# get_year(2021)
# get_year(2020)
# get_year(2019)
# get_year(2018)
# get_year(2017)
# get_year(2016)
# get_year(2015)

stacked_docs <- purrr::map(2015:2021, get_year) |> 
  list_rbind()

glimpse(stacked_docs)
count(stacked_docs, year)


```

## Clean stacked file and make uniform variable descriptions

Variable descriptions change somewhat from year to year, sometimes due to slight changes in what the variable measures, and sometimes for small inconsistencies.

Goals: (1) create a cleaned description for each variable for each year, and (2) create uniform description for each variable that can be used for all years.

Steps:

-   Clean each SOI variable, removing footnotes and other year-specific editorial inconsistencies.
-   For each variable, calculate a measure of distance between its description in one year and its description in the prior year.
-   Visually inspect descriptions that have large year-to-year changes
-   For a small set of variables that have significant changes, prepare new descriptions
-   Create uniform descriptions:
    -   for variables with minimal changes, use the latest year
    -   for variables with larger changes, use the new descriptions
-   Create and save new files:
    -   one with descriptions for each year - original descriptions, cleaned descriptions, and uniform descriptions
    -   one with a single uniform description for each variable

```{r}
#| label: clean-stacked-documentation
#| output: false

cleanit <- function(strings) {
  # remove any footnotes at the end of descriptions when in square brackets
  #   for example, remove [3] [16, 17] and similar
  stringr::str_remove(strings, " \\[\\d+(, \\d+)*\\]")
}

str_distance <- function(strings) {
  # calculate "distance" between strings - between the description for a variable
  #   in one year and the previous year
  if(length(strings)==1) return(rep(0, length(strings)))
  c(NA_integer_, sapply(2:length(strings), \(i) stringdist::stringdist(strings[i], strings[i - 1], method = "lv")))
}

# identify variables that have more than one description, and then
# identify instances where the descriptions are highly dissimilar

distances <- stacked_docs |> 
  select(year, soivname, description) |> 
  arrange(soivname, year) |>
  # fix known error
  mutate(soivname=ifelse(soivname=="CREP", "CPREP", soivname)) |> 
  # prepare to determine distances
  mutate(n=n(),
         nunique=length(unique(description)), 
         .by=soivname) |> 
  mutate(cleaned=cleanit(description),
         distance=str_distance(cleaned), 
         maxdist=max(distance, na.rm=TRUE),
         .by=soivname)

count(distances, maxdist)

# visually inspect differences to see which descriptions we will need to create manually
distances |> filter(maxdist == 2) # all good keep latest
distances |> filter(maxdist == 3) # keep latest
distances |> filter(maxdist == 4) # A10971, N10971
distances |> filter(maxdist == 10) # N2
distances |> filter(maxdist == 14) # A06500, N06500
distances |> filter(maxdist == 17) # A07180, N07180, N19700
distances |> filter(maxdist == 18) # A19700
distances |> filter(maxdist == 20) # A07225, N07225
distances |> filter(maxdist == 30) # A20950, N20950
distances |> filter(maxdist == 31) # N11070
distances |> filter(maxdist == 32) # A11070
distances |> filter(maxdist == 37) # A11450, N11450

adjusted_descriptions <- read_delim(
"soivname; adjusted
A00100; Adjusted gross income (AGI) amount
A10971; Economic impact payment amount (pre-2021 is different)
N10971; Number of returns with economic impact payment (pre-2021 is different)
N2; Number of individuals (pre-2018 is different)
N06500; Number of returns with income tax after credits (pre-2018 is different)
A06500; Income tax after credits amount (pre-2018 is different)
A07180; Nonrefundable child care credit amount (pre-2021 is different)
N07180; Number of returns with nonrefundable child care credit (pre-2021 is different)
N19700; Number of returns with Total charitable contributions (pre-2017 is different)
A19700; Total charitable contributions amount (pre-2017 is different)
A07225; Nonrefundable child and other dependent tax credit amount (pre-2021 is different)
N07225; Number of returns with nonrefundable child and other dependent tax credit (pre-2021 is different)
A20950; Other non-limited miscellaneous deductions amount (pre-2018 is different)
N20950; Number of returns with Other non-limited miscellaneous deductions (pre-2018 is different)
N11070; Number of returns with refundable child tax credit or additional child tax credit (pre-2021 is different)
A11070; Refundable child tax credit or additional child tax credit amount (pre-2021 is different)
A11450; Qualified sick and family leave credit for leave taken before April 1, 2021 amount (pre-2021 is different)
N11450; Number of returns with qualified sick and family leave credit for leave taken before April 1, 2021 (pre-2021 is different)
", delim=";", trim_ws=TRUE)
adjusted_descriptions

adjusted1 <- distances |> 
  mutate(last=last(cleaned),
         .by=soivname) |> 
  left_join(adjusted_descriptions,
            by = join_by(soivname)) |> 
  mutate(udescription=ifelse(!is.na(adjusted),
                             adjusted,
                             last))

cleaned_descriptions <- adjusted1 |> 
  mutate(soivname=str_to_lower(soivname)) |> 
  mutate(length=nchar(soivname),
         vtype=case_when(
           soivname == "numdep" ~ "count",
           length != 6 ~ "count",
           length == 6 & str_sub(soivname, 1, 1) == "n" ~ "count",
           length == 6 & str_sub(soivname, 1, 1) == "a" ~ "amount",
           .default = "ERROR"),
         basesoivname=case_when(
           soivname == "numdep" ~ "numdep",
           length == 6 ~ str_sub(soivname, 2, 6),
           .default = soivname
  )) |> 
  select(year, soivname, basesoivname, vtype, description, udescription)

count(cleaned_descriptions, vtype)

# verify no more than one description per variable per year
glimpse(cleaned_descriptions)
cleaned_descriptions |> 
  summarise(n=n(), .by=c(soivname, year)) |> 
  filter(n > 1) # should be an empty tibble


```

## Save raw file

```{r}
#| label: save-cleaned_file
#| output: false

write_csv(cleaned_descriptions, fs::path(DINTERMEDIATE, "soi_documentation_by_year_raw.csv"))


```


## Add variables we may create that are not in the SOI documentation

```{r}
#| label: new-variables
#| output: false

cleaned1 <- read_csv(fs::path(DINTERMEDIATE, "soi_documentation_by_year_raw.csv"))
glimpse(cleaned1)

count(cleaned1 |> 
        filter(str_starts(basesoivname, "18")),
      soivname, udescription, year)

# salt variables basesoivname 18400, sum of 18425 and 18450, both avail 2015-2021
# add documentation for n00100 agi count EVEN THOUGH it's not in the data
newvars_base <- read_delim(
"soivname; basesoivname; description
n18400; 18400; Number of returns with state and local income or sales tax (estimated)
a18400; 18400; State and local income or sales tax (estimated) amount
n00100; 00100; Number of returns with adjusted gross income (AGI)
",
delim=";", col_types="c", trim_ws = TRUE)
newvars_base

crosses <- crossing(year=2015:2021, vtype=c("amount", "count"))

newvars <- newvars_base |>
  cross_join(tibble(year=2015:2021)) |> 
  mutate(vtype=case_when(str_sub(soivname, 1, 1)=="n" ~ "count",
                         str_sub(soivname, 1, 1)=="a" ~ "amount",
                         .default = "ERROR"),
         udescription=description) |> 
  select(year, soivname, basesoivname, vtype, description, udescription)
newvars

cleaned_new <- bind_rows(cleaned1, newvars) |> 
  arrange(basesoivname, vtype, year)

```


## Save final documentation files

```{r}
#| label: save-final-files
#| output: false

write_csv(cleaned_new, fs::path(DINTERMEDIATE, "soi_documentation_by_year.csv"))

uniform_descriptions <- cleaned_new |> 
  select(soivname, basesoivname, vtype, udescription) |> 
  distinct()

# verify only one description per variable
anyDuplicated(uniform_descriptions$soivname)

write_csv(uniform_descriptions, fs::path(DINTERMEDIATE, "soi_documentation.csv"))

uniform_descriptions <- read_csv(fs::path(DINTERMEDIATE, "soi_documentation.csv"))

check <- count(uniform_descriptions, basesoivname, vtype, soivname, udescription)

```



