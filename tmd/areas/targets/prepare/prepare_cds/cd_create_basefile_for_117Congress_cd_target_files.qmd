---
output: html_document
editor_options: 
 chunk_output_type: console
---

# Create base file for 117th Congressional District target files

This section creates one long file that is a superset of what we need for individual 117th Congressional District target files. This long file has everything needed to extract and save a target file for any CD . It also has additional convenience variables that will not be included in individual CD target files such as variable descriptions, human-friendly AGI-range labels, state fips codes, and a sort code for ordering records within a CD. These variables are excluded when target files are written.

## Setup

```{r}
#| label: setup
#| output: false

suppressPackageStartupMessages(source(here::here("R", "libraries.R")))
source(here::here("R", "constants.R"))
source(here::here("R", "functions.R"))

```

## Create streamlined long CD-only file 

-   Drop non-CD records.
-   Drop variables we would never want.
-   Construct fstatus 0 records and records with counts by filing status.

Create and save as .csv a Congressional Districts targets basefile ("base_targets.csv") that has most of what we will need to write \[xx\]\_targets.csv files. It is a data frame with population and SOI target information for each state:

-   an initial "XTOT" record with the total population for the Congressional District
-   records for data from SOI Historical Table 2 with the following information:
    -   `soivname` -- the SOI variable name (later, when we write target files we will map the SOI variable name to the TMD variable name and we will put the TMD variable name on the \[xx\]\_targets.csv file)
    -   `count`, `scope`, `agilo`, `agihi`, `fstatus`, and `target` -- variables with the meanings noted in the [main documentation](https://github.com/PSLmodels/tax-microdata-benchmarking/tree/master/tmd/areas/targets)
    -   certain other useful identifying information

The information it will be missing at this point is: (1) any targets we need to estimate in other ways in cases where SOI targets are inappropriate or not available for a concept we care about, and (2) the TMD variable names. We hold off on adding TMD variable names until the last step because there are some challenges in mapping SOI concepts to TMD concepts. We want to have the targets right and then, finally, deal with the mapping.

## get data

```{r}
#| label: get-data
#| output: false

cdlong <- readRDS(fs::path(CDINTERMEDIATE, "soilong.rds"))
glimpse(cdlong)
count(cdlong, stabbr)

```

```{r}
#| label: clean-soi
#| output: false

# varname,count,scope,agilo,agihi,fstatus,target
allcounts <- c("n1", "n2", "mars1", "mars2", "mars4")
count(cdlong |> filter(basesoivname %in% allcounts), soivname)
count(cdlong, vtype)

cdlong1 <- cdlong |> 
  filter(rectype %in% c("US", "cd", "cdstate", "DC")) |> 
  rename(description = udescription) |> 
  mutate(
    scope = 1L, # filers
    
    count = case_when(
      vtype == "amount" ~ 0,
      vtype == "count" & 
        soivname %in% allcounts ~ 1, # count for any value for these vars
      vtype == "count" & 
        !soivname %in% allcounts ~ 2, # counts when var is nonzero
      .default = -9e9),
    count = as.integer(count),
    
    fstatus = case_when(
      str_starts(soivname, "mars") ~ str_sub(soivname, -1),
      .default = "0"),
    fstatus = as.integer(fstatus))

count(cdlong1, scope)
count(cdlong1, vtype, count)
count(cdlong1, fstatus)
count(cdlong1, stabbr)

```

### Prepare population

```{r}
#| label: prepare-population
#| output: false

agilabels <- read_csv(fs::path(CDRAW, "agilabels.csv"))

cdpop <- read_csv(fs::path(CDINTERMEDIATE, "cdpop1year.csv"))
glimpse(cdpop)
# create the pop recs -- add a U.S. record

uspoprec <- tibble(stabbr="US", congdist="00", cdname="U.S. record", target=334283385)

poprecs <- cdpop |> 
  select(stabbr=STATE, congdist=CONG_DISTRICT, cdname, target=pop2021) |> 
  bind_rows(uspoprec) |> 
  mutate(soivname="XTOT",
         basesoivname="XTOT",
         description = "State population in 2021 per the 1-year ACS",
         agistub = 0,
         count = 0,
         scope = 0, 
         fstatus = 0) |> 
  # bring in agilo and agihi
  left_join(agilabels,
            by = join_by(agistub)) 

```


## Combine population and SOI data and save

```{r}
#| label: combine-pop-and-soi-data-and-save
#| output: false

names(cdlong1)
names(poprecs)

cdlong2 <- cdlong1 |> 
  rename(target=value) |> 
  select(-rectype)
  
base_targets <- bind_rows(poprecs, cdlong2) |> 
  mutate(area=paste0(stabbr, congdist)) |> 
  arrange(stabbr, scope, fstatus, basesoivname, count, agistub) |> 
  select(stabbr, cd=congdist, area, 
         agistub, agilo, agihi, agilabel, 
         soivname, basesoivname, scope, fstatus, count, target, description)
glimpse(base_targets)

check <- base_targets |> filter(stabbr=="NY")

check <- base_targets |> filter(stabbr=="US")

write_csv(base_targets, fs::path(CDINTERMEDIATE, "base_targets.csv"))

```
