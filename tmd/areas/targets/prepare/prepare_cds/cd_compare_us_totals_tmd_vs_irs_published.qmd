---
output: html_document
editor_options: 
 chunk_output_type: console
---

# Compare U.S. totals of mapped variables, tax-microdata-benchmarking vs. IRS published CD values


## Setup 
```{r}
#| label: setup

source(here::here("R", "libraries.R"))
source(here::here("R", "constants.R"))
source(here::here("R", "functions.R"))

```

## Get data

```{r}
#| label: get-data
#| output: false

vmap <- read_csv(fs::path(CDINTERMEDIATE, "cd_variable_mapping.csv"))
cdirs <- read_csv(fs::path(CDINTERMEDIATE, "cdbasefile_sessions.csv"))

fpath <-  fs::path(TMDDATA, "cached_allvars.csv")
tmd2021 <- vroom(fpath)
ns(tmd2021)

```

## Create comparison file

Prepare Congressional district data.

```{r}
#| label: prepare-cd-data
#| output: false

count(cdirs, count)

cd2 <- cdirs |> 
  filter(basevname %in% vmap$basevname,
         session==118,
         scope==1 | basevname=="XTOT")

glimpse(cd2)
count(cd2, count)
count(cd2, basevname, vname)
count(cd2, rectype)
count(cd2, scope)
count(cd2, fstatus)
count(cd2 |> filter(str_detect(vname, "MARS")), 
      vname, fstatus)
skim(cd2)

# get sums over all Congressional districts
cd_adjusted <- cd2 |> 
  summarise(target=sum(target), n=n(),
            .by=c(basevname, vname, scope, count, fstatus, agistub, agirange, description)) |> 
  select(-n) # I want to look at n but not keep it in the file

```

Prepare tmd data

Start by getting desired sums and making long

```{r}
#| label: get-tmdsums-long
#| eval: true
#| output: false

# CDAGICUTS

ns(tmd2021)
keepvars <- c("RECID", "data_source", "MARS", "s006", unique(vmap$varname))
tmdprep <- tmd2021 |> 
  select(all_of(keepvars)) |> 
  mutate(scope=ifelse(data_source==0, 2, 1),
         agistub=cut(c00100, CDAGICUTS, right = FALSE, ordered_result = TRUE) |> 
           as.integer(),
         # create all-returns count variables fow which we want weighted sums
         N1=1,
         MARS1 = if_else(MARS == 1, 1, 0),
         MARS2 = if_else(MARS == 2, 1, 0),
         MARS4 = if_else(MARS == 4, 1, 0))
# summary(tmdprep)

sum_vars <- unique(vmap$varname)
nzcount_vars <- setdiff(sum_vars, "XTOT")
allcount_vars <- c("N1", "MARS1", "MARS2", "MARS4")

tmdsums <- tmdprep |> 
  # note that we get nzcount for AGI but don't have counterpart in the CD data
  summarize(across(all_of(sum_vars), list(amount = \(x) sum(x * s006))),
            across(all_of(nzcount_vars), list(nzcount = \(x) sum((x!=0) * s006))),
            across(all_of(allcount_vars), list(allcount = \(x) sum((x==1) * s006))),
            .by=c(scope, agistub)) |> 
  arrange(scope, agistub)

# look at nzcounts
tmdsums |> select(scope, agistub, contains("nzcount"))
tmdsums |> select(scope, agistub, contains("allcount"))
tmdsums |> select(scope, agistub, contains("amount"))
tmdsums |> select(scope, agistub, N1_allcount, c00100_nzcount) |> mutate(ratio=c00100_nzcount / N1_allcount)

tmdsums |> 
  filter(scope==1) |> 
  select(scope, agistub, e00200_nzcount) |> 
  janitor::adorn_totals()

tmdsums |> 
  filter(scope==1) |> 
  select(scope, agistub, contains("c00100") & contains("count")) |> 
  janitor::adorn_totals()

# flip around and get count and fstatus
tmdsums_long <- tmdsums |> 
  pivot_longer(cols=-c(scope, agistub), values_to = "wtdvalue") |> 
  separate_wider_delim(cols=name, delim="_", names=c("varname", "type")) |> 
  mutate(
    count = case_when(
      type == "amount"   ~ 0,
      type == "allcount" ~ 1,
      type == "nzcount"  ~ 2,
      .default = -9e9),
    fstatus=case_when(
      varname %in% c("MARS1", "MARS2", "MARS4") ~ str_sub(varname, -1),
      .default = "0"),
    fstatus=as.integer(fstatus)) |> 
  select(varname, scope, fstatus, count, agistub, wtdvalue)
glimpse(tmdsums_long)
count(tmdsums_long, count)
count(tmdsums_long, fstatus)

tmdsums_long |> 
  filter(varname=="e00200", scope==1, count==2) |> 
  janitor::adorn_totals()

tmdsums_long |> filter(count==2, agistub==1) # looks good
tmdsums_long |> filter(count==1, agistub==4) 
# 37,694,755 is the bad val allcount
tmdsums_long |> filter(varname=="MARS1")

```


Add additional category sums

```{r}

# we don't need sums over scope because entire scope is 1 for this, other than population
# we don't need sums over filing status because we're only concerned about selected fstatus

# add sums over filing statuses as this is what we'll usually want
# tmd_fstatustots <- tmdsums_long |>
#   filter(!str_starts(varname, "MARS")) |> # we don't need MARS totals over all filing statuses
#   summarise(wtdvalue=sum(wtdvalue),
#                       .by=c(varname, scope, agistub, count)) |>
#   mutate(fstatus=0) |>
#   bind_rows(tmdsums_long)
# count(tmd_fstatustots, varname)
# tmd_fstatustots |> filter(varname=="MARS1")
# tmd_fstatustots |> 
#   filter(varname=="e00200", scope==1, count==2, fstatus==0) |> 
#   janitor::adorn_totals()
# tmd_fstatustots |> 
#   filter(varname=="e00200", scope==1, count==0) |> 
#   janitor::adorn_totals()


# add sums over agi ranges
tmd_agitots <- tmdsums_long |> 
  summarise(wtdvalue=sum(wtdvalue), 
                      .by=c(varname, scope, fstatus, count)) |> 
  mutate(agistub=0) |> 
  bind_rows(tmdsums_long)
tmd_agitots |> filter(varname=="MARS1")

tmd_agitots |>
  filter(varname=="e00200", scope==1, count==2, fstatus==0, agistub!=0) |>
  janitor::adorn_totals()

# concatenate totals across scopes
tmd_scopetots <- tmd_agitots |> 
  summarise(wtdvalue=sum(wtdvalue), 
                      .by=c(varname, agistub, fstatus, count)) |> 
  mutate(scope=0) |> 
  bind_rows(tmd_agitots) |> 
  select(varname, scope, fstatus, count, agistub, wtdvalue) |> 
  arrange(varname, scope, fstatus, count, agistub)
# skim(tmd_scopetots)
tmd_scopetots |> filter(varname=="MARS1")
count(tmd_scopetots, varname)

tmd_scopetots |>
  filter(varname=="e00200", scope==1, count==2, fstatus==0, agistub!=0) |>
  janitor::adorn_totals()


vmap_prep <- vmap |> 
  mutate(varname=ifelse(basevname %in% allcount_vars, basevname, varname))

# setequal(vmap_prep$varname, tmd_scopetots$varname)
# setdiff(tmd_scopetots$varname, vmap_prep$varname)
# setdiff(vmap_prep$varname, tmd_scopetots$varname)

# put basevname and description onto the file
tmd_adjusted <- tmd_scopetots |> 
  left_join(vmap_prep, by = join_by(varname, fstatus))

skim(tmd_adjusted)

```


## Prepare comparison file

```{r}
#| label: prepare-compare
#| eval: true
#| output: false

count(tmd_adjusted, basevname)
count(cd_adjusted, basevname)

cd_adjusted2 <- cd_adjusted |> 
  mutate(basevname=ifelse(vname %in% allcount_vars,
                          vname, 
                          basevname))

comp <- tmd_adjusted |> 
  select(-description) |> 
  inner_join(cd_adjusted2,
            by = join_by(scope, fstatus, count, agistub, basevname)) |> 
  relocate(wtdvalue, .after = target) |> 
  mutate(diff=wtdvalue - target,
         pdiff=diff / target)
summary(comp)
skim(comp) # will generate Inf, -Inf warning

write_csv(comp, fs::path(CDINTERMEDIATE, "cd_tmd_irs_compare.csv"))

```


## Explore comparisons file

```{r}
#| label: explore-compare
#| eval: true
#| output: false

comp <- read_csv(fs::path(CDINTERMEDIATE, "cd_tmd_irs_compare.csv"))

comp |> 
  arrange(desc(abs(pdiff)))

badmatches <- c("e18400", "e18500", "e02400") # variables where tmd and IRS concepts are not well aligned

badmatches <- c("e18400", "e18500", "e02400", "e26270") # to make it easier to examine other variables

check <- comp |> 
  filter(!varname %in% badmatches, count==2) |> 
  arrange(desc(abs(pdiff)))

check <- comp |> 
  filter(!varname %in% badmatches, count==1) |> 
  arrange(desc(abs(pdiff)))

comp |> filter(!varname %in% badmatches, count==0, agistub==0) |> gt() |> fmt_number(columns = c(target, wtdvalue, diff), decimals = 0)
comp |> filter(!varname %in% badmatches, count==1, agistub==0) |> gt() |> fmt_number(columns = c(target, wtdvalue, diff), decimals = 0)
comp |> filter(!varname %in% badmatches, count==2, agistub==0) |> gt() |> fmt_number(columns = c(target, wtdvalue, diff), decimals = 0)

tmd2021 |> 
  filter(data_source==1, c00100 != 0) |> 
  summarise(n=sum(s006)) # 160850840

temp2 <- tmd_adjusted |> filter(fstatus==0, agistub==0, varname=="c00100", scope==1)
temp2 |> gt() |> fmt_number(wtdvalue, decimals=0)
# count 1 161,696,687
# count 2 160,850,840

temp <- comp |> 
  filter(varname=="c00100", scope==1, agistub==0, count==2)
# target 157375370 value 160850840

comp |> 
  filter(!varname %in% badmatches) |> 
  arrange(desc(abs(pdiff)))

comp |> 
  filter(!varname %in% badmatches, count==1) |> 
  arrange(desc(wtdvalue))

comp |> 
  filter(!varname %in% badmatches, count==1, agistub==4) |> 
  arrange(desc(wtdvalue))

check <- comp |> 
  filter(!varname %in% badmatches, count==0) |> 
  arrange(desc(abs(pdiff)))

check |> 
  filter(agistub==0)

check |> 
  filter(agistub==9)

verybad <- check |> 
  filter(abs(pdiff) >= .3)

verybad
verybad |> 
  filter(agistub==0)

# Lessons:
#  - e26270 Partnership / S Corp looks like it could be a conceptual mismatch?? Or some other problem in concept?
#      agistub 0 is within 1.5% but ranges are way off
#      should we create a shared-down variable?
#  - e00300 taxable interest seems a little off

# agistub 0 
#   n returns with taxable interest tmd >> cd
#                  wages tmd >> cd  
#   wage target 124333630 wage CD file: 124333630 wage natl file irs table 1.4 126,082,290
#   but we say wtdvalue is 252208964 ?? actual is 126104482
tmd2021 |> 
  summarise(nwages=sum(s006 * (e00200 != 0)),
            wages=sum(s006 * e00200),
            .by=data_source)

```

