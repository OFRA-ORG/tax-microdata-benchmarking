---
output: html_document
editor_options: 
 chunk_output_type: console
---

# Parse and show SOI Congressional District data documentation

## Setup

```{r}
#| label: setup

source(here::here("R", "libraries.R"))
source(here::here("R", "constants.R"))
source(here::here("R", "functions.R"))

```

```{r}
#| eval: false

# sample state documentation
# soivname,basesoivname,vtype,udescription
# a00100,00100,amount,Adjusted gross income (AGI) amount
# n00100,00100,count,Number of returns with adjusted gross income (AGI)
# ...
# n1,n1,count,Number of returns
# n2,n2,count,Number of individuals (pre-2018 is different)

#    row vname     description                                                     reference type  vtype basevname
#   <dbl> <chr>     <chr>                                                           <chr>     <chr> <chr> <chr>    
# 1     1 STATEFIPS The State Federal Information Processing System (FIPS) code [3] 01-56     Char  other NA       


```


## Parse and save variable documentation

This section gets and cleans SOI variable documentation from an Excel file we created, "cd_documentation_extracted_from_21incddocguide.docx.xlsx" that is based on a table in SOI's Word documentation (21incddocguide.docx).

We put the cleaned data in "variable_documentation.csv" in the "../cds/intermediate" folder.


```{r}
#| label: parse-save-doc
#| output: false

doc1 <- read_excel(fs::path(CDRAW, CDDOCEXTRACT), sheet = "cleaned", range = "A2:D169")

# clean SOI documentation and 
doc2 <- doc1 |> 
  mutate(
    across(everything(),
           \(x) str_trim(x)),
    # clean reference field so that we can show line breaks in datatable
    reference = str_replace_all(reference,
                                coll("\r\n"),
                                 "<br>"
                                 )) |> 
  # determine whether variable is count, amount, or other
  mutate(vtype = case_when(
    vname %in% c("STATEFIPS", "STATE", "CONG_DISTRICT", "AGI_STUB") ~ "other",
    str_detect(description,
               coll("number of", ignore_case = TRUE)) ~ "count",
    str_detect(description, coll("amount", ignore_case = TRUE)) ~ "amount",
    # dollar amounts where description does not contain "amount"
    vname %in% c("A00100", "A02910", "A04475", "A11520", "A11530", "A18460") ~ "amount",
    .default = "ERROR")) |> 
  mutate(description = ifelse(vname == "A00100",
                              str_replace(description, "Adjust gross", "Adjusted gross"),
                              description),
         row = row_number()) |> 
  relocate(row)

# determine which variable names are part of a count-amount pair and get the base variable name
doc3 <- doc2 |> 
  mutate(suffix = ifelse(nchar(vname) == 6,
                         str_sub(vname, 2, -1),
                         NA_character_),
         suffix = ifelse(!is.na(as.integer(suffix)),
                         suffix,
                         NA_character_)) |> 
  arrange(suffix, vname) |> 
  mutate(nvars = n(), .by=suffix) |> 
  # basevname is the "base" variable name when we might have both a count and an amount
  # 2 variables A00100 and A00101 do not follow this format but we 
  # may create counts for them later so we still want a basevname
  mutate(basevname= ifelse(nvars==2 | vname %in% c("A00100", "A00101"),
                           paste0("v", suffix),
                           NA_character_)) |> 
  select(-c(nvars, suffix)) |> 
  arrange(row)

# conform to the state documentation style
# write_csv(doc3, fs::path(CDINTERMEDIATE, "variable_documentation.csv")) # old name

glimpse(doc3)
# soivname,basesoivname,vtype,udescription
doc4 <- doc3 |> 
  rename(soivname = vname, basesoivname=basevname, udescription=description) |> 
  mutate(soivname = stringr::str_to_lower(soivname),
         basesoivname = stringr::str_to_lower(basesoivname),
         basesoivname = stringr::str_remove(basesoivname, "v"),
         basesoivname = ifelse(is.na(basesoivname), soivname, basesoivname)) |> 
  select(soivname, basesoivname, vtype, udescription)
ht(doc4)

# doc4 |> filter(str_starts(soivname, "a18"))
#  soivname basesoivname vtype  udescription                            
#   <chr>    <chr>        <chr>  <chr>                                   
# 1 a18425   18425        amount State and local income taxes amount     
# 2 a18450   18450        amount State and local general sales tax amount
# 3 a18500   18500        amount Real estate taxes amount                
# 4 a18800   18800        amount Personal property taxes amount          
# 5 a18460   18460        amount Limited state and local taxes           
# 6 a18300   18300        amount Total taxes paid amount         
# add more names
# salt variables basesoivname 18400, sum of 18425 and 18450, both avail 2015-2021
# add documentation for n00100 agi count EVEN THOUGH it's not in the data
newvars <- read_delim(
"soivname; basesoivname; udescription
n18400; 18400; Number of returns with state and local income or sales tax (estimated)
a18400; 18400; State and local income or sales tax (estimated) amount
n00100; 00100; Number of returns with adjusted gross income (AGI)
",
delim=";", col_types="c", trim_ws = TRUE) |>
  mutate(vtype=case_when(str_sub(soivname, 1, 1)=="n" ~ "count",
                         str_sub(soivname, 1, 1)=="a" ~ "amount",
                         .default = "ERROR"))
newvars

doc5 <- bind_rows(doc4, newvars) |> 
  arrange(basesoivname, vtype)
# note that this has a few variables with vtype other; state version should do the same
  
write_csv(doc5, fs::path(CDINTERMEDIATE, "soi_documentation.csv"))

rm(doc1, doc2, doc3, doc4, doc5)

```

Project team members run this next chunk interactively to do some checks on the variable documentation. It has option `eval: false` and will not be run when the project is rendered.

## Show variable documentation in a datatable

Show documentation table for variables in the Congressional District csv data. The table can be filtered and sorted interactively using column headers.

```{r}
#| label: show-doc

vdoc <- read_csv(fs::path(CDINTERMEDIATE, "soi_documentation.csv"))

vdoc |>
  mutate(vtype = as.factor(vtype)) |> 
  DT::datatable(rownames = FALSE,
                options = list(order = list(0, "asc"), # use 1st column (0) for sorting
                               scrollX = TRUE, scrollY = TRUE, paging = TRUE, pageLength = 20,
                               autoWidth = TRUE),
                filter="top",
                escape = FALSE)

rm(vdoc)

```

