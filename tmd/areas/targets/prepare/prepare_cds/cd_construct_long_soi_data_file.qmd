---
output: html_document
editor_options: 
 chunk_output_type: console
---

# Parse the Congressional District data

Goal: create a 117th CD data file that is almost in the form needed for targets files. 

This involves cleaning the SOI Congressional District data, adding agi bin information, adding variable documentation, and saving as a long file.

## Setup

```{r}
#| label: setup

source(here::here("R", "libraries.R"))
source(here::here("R", "constants.R"))
source(here::here("R", "functions.R"))

# 334283385.27000004 national pop

```

## Background

> AREA prefix for state areas are the two lower-case character postal codes. AREA prefix for congressional districts are the state prefix followed by two digits (with a leading zero) identifying the district. There are no district files for states with only one congressional district.

Here is an example of the first few rows of a targets file:

![](images/Image 2024-10-20 at 5.23.32 PM.jpeg)
## Prepare, clean, and save SOI Congressional District wide data file

Get previously downloaded IRS SOI data with aggregate information for individual Congressional Districts.

```{r}
#| label: parse-cddata
#| eval: true
#| output: false

# read the CD csv data file from the zip archive that contains it
zpath <-  fs::path(CDRAW, fs::path_file(CDZIPURL))
con <- unz(zpath, "21incd.csv")
data <- read_csv(con)
rm(con)

count(data, STATE) # US, DC, and 50 states
count(data, CONG_DISTRICT) # max is 53

```

Clean SOI CD data:

-   create record-type variable
-   add agi bin labels and bounds
- 

```{r}
# djb
agilabels <- read_csv(fs::path(CDRAW, "agilabels.csv"))

data2 <- data |> 
  rename_with(stringr::str_to_lower) |> 
  rename(agistub=agi_stub, stabbr=state, congdist=cong_district) |> 
  mutate(nstub0 = sum(agistub == 0),
         .by = stabbr) |> # get a count of the number of agistub0 records in each state
  mutate(rectype = case_when(
    stabbr %in% c("US", "DC") ~ stabbr,
    nstub0 == 1 ~ "cdstate", # the cd and state record for 8 states with only 1 cd
    nstub0 > 1 & congdist == "00" ~ "state",
    nstub0 > 1 & congdist != "00" ~ "cd", # cd records for multi-cd states
    .default = "ERROR"
  )) |> 
  mutate(ndist = sum(agistub ==0 & rectype %in% c("cdstate", "cd")), .by=stabbr) |> 
  left_join(agilabels, by = join_by(agistub)) |> 
  select(-nstub0) |> 
  relocate(rectype, ndist) |> 
  relocate(agilabel, agilo, agihi, .after=agistub)

cdnums <- data2 |> 
  select(stabbr, ndist) |> 
  distinct() |> 
  janitor::adorn_totals()

# single-CD states
cdnums |> 
  filter(ndist==1)

data2 |> 
  filter(agistub == 0) |> 
  count(rectype)

write_csv(data2, fs::path(CDINTERMEDIATE, "cddata_wide_clean.csv"))

```

## Create long SOI data file

-   convert to a long file
-   merge with variable documentation file
-   save as "cddata_long_clean.csv" in intermediate file directory

```{r}
#| label: create-save-soi-cddata-long
#| eval: true
#| output: false

cdwide <- read_csv(fs::path(CDINTERMEDIATE, "cddata_wide_clean.csv"))
doc <- read_csv(fs::path(CDINTERMEDIATE, "soi_documentation.csv"))

glimpse(cdwide)
glimpse(doc)

idvars <- c("rectype", "ndist", "statefips", "stabbr", "congdist", 
            "agistub", "agilabel", "agilo", "agihi")

dlong1 <- cdwide |> 
  pivot_longer(cols = -all_of(idvars),
               names_to = "soivname",) |> 
  left_join(doc |> 
              select(soivname, basesoivname, vtype, udescription),
            by = join_by(soivname))

glimpse(dlong1)
count(dlong1, soivname)
count(dlong1, vtype)
count(dlong1, stabbr)
check <- count(dlong1, basesoivname, soivname)

write_csv(dlong1, fs::path(CDINTERMEDIATE, "cddata_long_clean.csv"))

# state long
# "stabbr" "soivname" "basesoivname" "vtype" "agistub" "agilo" "agihi" "agilabel" "year" "value" "udescription" "description" 

```


### Enhance the raw data with derived variables

```{r}
#| label: add-18400
#| output: false

soilong_raw <- readr::read_csv(fs::path(CDINTERMEDIATE, "cddata_long_clean.csv"))
glimpse(soilong_raw)

# investigate the data to make sure correct
check <- soilong_raw |> 
  filter(str_sub(soivname, 2, -1) %in% c("18425", "18450"))

#.. 18400 State and local income or sales tax (estimated)
est18400 <- soilong_raw |> 
  filter(basesoivname %in% c("18425", "18450")) |> 
  mutate(soivname=paste0(str_sub(soivname, 1, 1), "18400")) |> 
  summarise(value=sum(value),
            .by=c(rectype, stabbr, congdist, agistub, soivname))
glimpse(est18400)
skim(est18400)

glimpse(soilong_raw)

soilong1 <- bind_rows(soilong_raw |> 
                        select(all_of(names(est18400))),
                      est18400)

```


```{r}
#| label: soilong-final
#| output: false

variable_descriptions <- read_csv(fs::path(CDINTERMEDIATE, "soi_documentation.csv"))
agilabels <- read_csv(fs::path(CDRAW, "agilabels.csv"))

soilong2 <- soilong1 |> 
  left_join(variable_descriptions,
            by = join_by(soivname)) |> 
  left_join(agilabels, by = join_by(agistub)) |> 
  mutate(value=ifelse(vtype=="amount", value * 1000, value)) |> 
  select(rectype, stabbr, congdist, soivname, basesoivname, vtype, 
         agistub, agilo, agihi, agilabel, value, udescription) |> 
  arrange(rectype, stabbr, congdist, soivname, basesoivname, vtype, agistub)

skim(soilong2)
check <- count(soilong2, basesoivname, vtype, soivname, udescription)

saveRDS(soilong2, fs::path(CDINTERMEDIATE, "soilong.rds"))

```

